//-----------------------------------------------------------------------------
// DEAR IMGUI COMPILE-TIME OPTIONS
// Runtime options (clipboard callbacks, enabling various features, etc.) can generally be set via the ImGuiIO structure.
// You can use ImGui::SetAllocatorFunctions() before calling ImGui::CreateContext() to rewire memory allocation functions.
//-----------------------------------------------------------------------------
// A) You may edit imconfig.h (and not overwrite it when updating Dear ImGui, or maintain a patch/rebased branch with your modifications to it)
// B) or '#define IMGUI_USER_CONFIG "my_imgui_config.h"' in your project and then add directives in your own file without touching this template.
//-----------------------------------------------------------------------------
// You need to make sure that configuration settings are defined consistently _everywhere_ Dear ImGui is used, which include the imgui*.cpp
// files but also _any_ of your code that uses Dear ImGui. This is because some compile-time options have an affect on data structures.
// Defining those options in imconfig.h will ensure every compilation unit gets to see the same data structure layouts.
// Call IMGUI_CHECKVERSION() from your .cpp file to verify that the data structures your files are using are matching the ones imgui.cpp is using.
//-----------------------------------------------------------------------------

#pragma once

#cmakedefine01 IMGUI_SHARED_LIBRARY
#cmakedefine01 IMGUI_EMSCRIPTEN
#cmakedefine01 IMGUI_BUILD_EXAMPLE
#cmakedefine01 IMGUI_OPENGL
#cmakedefine01 IMGUI_GLM
#cmakedefine01 IMGUI_ENABLE_FREETYPE
#cmakedefine01 IMGUI_GLEW
#cmakedefine01 IMGUI_SDL2
#cmakedefine01 IMGUI_TIFF
#cmakedefine01 IMGUI_RENDERING_VULKAN
#cmakedefine01 IMGUI_RENDERING_GL3
#cmakedefine01 IMGUI_RENDERING_GL2
#cmakedefine01 IMGUI_RENDERING_DX12
#cmakedefine01 IMGUI_RENDERING_DX11
#cmakedefine01 IMGUI_RENDERING_DX10
#cmakedefine01 IMGUI_RENDERING_DX9
#cmakedefine01 IMGUI_RENDERING_MATAL
#cmakedefine01 IMGUI_PLATFORM_SDL2
#cmakedefine01 IMGUI_PLATFORM_GLFW
#cmakedefine01 IMGUI_PLATFORM_GLUT
#cmakedefine01 IMGUI_PLATFORM_WIN32
#cmakedefine01 IMGUI_FONT_NO_UTF8
#cmakedefine01 IMGUI_FONT_NO_LATIN
#cmakedefine01 IMGUI_FONT_HEI
#cmakedefine01 IMGUI_FONT_KAI
#cmakedefine01 IMGUI_FONT_SONG
#cmakedefine01 IMGUI_FONT_YUAN
#cmakedefine01 IMGUI_FONT_SARASA
#cmakedefine01 IMGUI_FONT_WEIHEI
#cmakedefine01 IMGUI_FONT_SANS
#cmakedefine01 IMGUI_FONT_ZPIX
#cmakedefine01 IMGUI_FONT_MONONARROW
#cmakedefine01 IMGUI_FONT_INCONSOLATA
#cmakedefine01 IMGUI_FONT_TAHOMA
#cmakedefine01 IMGUI_FONT_COUSINE
#cmakedefine01 IMGUI_FONT_DROIDSANS
#cmakedefine01 IMGUI_FONT_KARLA
#cmakedefine01 IMGUI_FONT_MONACO
#cmakedefine01 IMGUI_FONT_PROGGYTINY
#cmakedefine01 IMGUI_FONT_ROBOTO
#cmakedefine01 IMGUI_FONT_SOURCECODEPRO
#cmakedefine01 IMGUI_ICONS
#cmakedefine01 IMGUI_APPLICATION_RENDERING_VULKAN
#cmakedefine01 IMGUI_APPLICATION_RENDERING_GL3
#cmakedefine01 IMGUI_APPLICATION_RENDERING_GL2
#cmakedefine01 IMGUI_APPLICATION_RENDERING_DX11
#cmakedefine01 IMGUI_APPLICATION_RENDERING_DX9
#cmakedefine01 IMGUI_APPLICATION_PLATFORM_SDL2
#cmakedefine01 IMGUI_APPLICATION_PLATFORM_GLFW
#cmakedefine01 IMGUI_APPLICATION_PLATFORM_GLUT
#cmakedefine01 IMGUI_APPLICATION_PLATFORM_WIN32

//---- Define assertion handler. Defaults to calling assert().
// If your macro uses multiple statements, make sure is enclosed in a 'do { .. } while (0)' block so it can be used as a single statement.
//#define IM_ASSERT(_EXPR)  MyAssert(_EXPR)
//#define IM_ASSERT(_EXPR)  ((void)(_EXPR))     // Disable asserts

//---- Define attributes of all API symbols declarations, e.g. for DLL under Windows
// Using Dear ImGui via a shared library is not recommended, because of function call overhead and because we don't guarantee backward nor forward ABI compatibility.
// - Windows DLL users: heaps and globals are not shared across DLL boundaries! You will need to call SetCurrentContext() + SetAllocatorFunctions()
//   for each static/DLL boundary you are calling from. Read "Context and Memory Allocators" section of imgui.cpp for more details.
//#define IMGUI_API __declspec(dllexport)                   // MSVC Windows: DLL export
//#define IMGUI_API __declspec(dllimport)                   // MSVC Windows: DLL import
//#define IMGUI_API __attribute__((visibility("default")))  // GCC/Clang: override visibility when set is hidden

#ifdef _WIN32
#if IMGUI_SHARED_LIBRARY
#define IMGUI_API __declspec( dllexport )
#else
#define IMGUI_API
#endif
#else
#if IMGUI_SHARED_LIBRARY
#define IMGUI_API __attribute__((visibility("default"))) 
#else
#define IMGUI_API
#endif
#endif

//---- Don't define obsolete functions/enums/behaviors. Consider enabling from time to time after updating to clean your code of obsolete function/names.
//#define IMGUI_DISABLE_OBSOLETE_FUNCTIONS
//#define IMGUI_DISABLE_OBSOLETE_KEYIO                      // 1.87+ disable legacy io.KeyMap[]+io.KeysDown[] in favor io.AddKeyEvent(). This is automatically done by IMGUI_DISABLE_OBSOLETE_FUNCTIONS.

//---- Disable all of Dear ImGui or don't implement standard windows/tools.
// It is very strongly recommended to NOT disable the demo windows and debug tool during development. They are extremely useful in day to day work. Please read comments in imgui_demo.cpp.
//#define IMGUI_DISABLE                                     // Disable everything: all headers and source files will be empty.
//#define IMGUI_DISABLE_DEMO_WINDOWS                        // Disable demo windows: ShowDemoWindow()/ShowStyleEditor() will be empty.
//#define IMGUI_DISABLE_DEBUG_TOOLS                         // Disable metrics/debugger and other debug tools: ShowMetricsWindow(), ShowDebugLogWindow() and ShowIDStackToolWindow() will be empty.

//---- Don't implement some functions to reduce linkage requirements.
//#define IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCTIONS   // [Win32] Don't implement default clipboard handler. Won't use and link with OpenClipboard/GetClipboardData/CloseClipboard etc. (user32.lib/.a, kernel32.lib/.a)
#define IMGUI_ENABLE_WIN32_DEFAULT_IME_FUNCTIONS          // [Win32] [Default with Visual Studio] Implement default IME handler (require imm32.lib/.a, auto-link for Visual Studio, -limm32 on command-line for MinGW)
//#define IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS         // [Win32] [Default with non-Visual Studio compilers] Don't implement default IME handler (won't require imm32.lib/.a)
//#define IMGUI_DISABLE_WIN32_FUNCTIONS                     // [Win32] Won't use and link with any Win32 function (clipboard, IME).
//#define IMGUI_ENABLE_OSX_DEFAULT_CLIPBOARD_FUNCTIONS      // [OSX] Implement default OSX clipboard handler (need to link with '-framework ApplicationServices', this is why this is not the default).
//#define IMGUI_DISABLE_DEFAULT_SHELL_FUNCTIONS             // Don't implement default platform_io.Platform_OpenInShellFn() handler (Win32: ShellExecute(), require shell32.lib/.a, Mac/Linux: use system("")).
//#define IMGUI_DISABLE_DEFAULT_FORMAT_FUNCTIONS            // Don't implement ImFormatString/ImFormatStringV so you can implement them yourself (e.g. if you don't want to link with vsnprintf)
//#define IMGUI_DISABLE_DEFAULT_MATH_FUNCTIONS              // Don't implement ImFabs/ImSqrt/ImPow/ImFmod/ImCos/ImSin/ImAcos/ImAtan2 so you can implement them yourself.
//#define IMGUI_DISABLE_FILE_FUNCTIONS                      // Don't implement ImFileOpen/ImFileClose/ImFileRead/ImFileWrite and ImFileHandle at all (replace them with dummies)
//#define IMGUI_DISABLE_DEFAULT_FILE_FUNCTIONS              // Don't implement ImFileOpen/ImFileClose/ImFileRead/ImFileWrite and ImFileHandle so you can implement them yourself if you don't want to link with fopen/fclose/fread/fwrite. This will also disable the LogToTTY() function.
//#define IMGUI_DISABLE_DEFAULT_ALLOCATORS                  // Don't implement default allocators calling malloc()/free() to avoid linking with them. You will need to call ImGui::SetAllocatorFunctions().
//#define IMGUI_DISABLE_SSE                                 // Disable use of SSE intrinsics even if available

//---- Enable Test Engine / Automation features.
//#define IMGUI_ENABLE_TEST_ENGINE                          // Enable imgui_test_engine hooks. Generally set automatically by include "imgui_te_config.h", see Test Engine for details.

//---- Include imgui_user.h at the end of imgui.h as a convenience
// May be convenient for some users to only explicitly include vanilla imgui.h and have extra stuff included.
#define IMGUI_INCLUDE_IMGUI_USER_H
//#define IMGUI_USER_H_FILENAME         "my_folder/my_imgui_user.h"

//---- Pack colors to BGRA8 instead of RGBA8 (to avoid converting from one to another)
//#define IMGUI_USE_BGRA_PACKED_COLOR

//---- Use 32-bit for ImWchar (default is 16-bit) to support Unicode planes 1-16. (e.g. point beyond 0xFFFF like emoticons, dingbats, symbols, shapes, ancient languages, etc...)
//#define IMGUI_USE_WCHAR32

//---- Avoid multiple STB libraries implementations, or redefine path/filenames to prioritize another version
// By default the embedded implementations are declared static and not available outside of Dear ImGui sources files.
//#define IMGUI_STB_TRUETYPE_FILENAME   "my_folder/stb_truetype.h"
//#define IMGUI_STB_RECT_PACK_FILENAME  "my_folder/stb_rect_pack.h"
//#define IMGUI_STB_SPRINTF_FILENAME    "my_folder/stb_sprintf.h"    // only used if IMGUI_USE_STB_SPRINTF is defined.
//#define IMGUI_DISABLE_STB_TRUETYPE_IMPLEMENTATION
//#define IMGUI_DISABLE_STB_RECT_PACK_IMPLEMENTATION
//#define IMGUI_DISABLE_STB_SPRINTF_IMPLEMENTATION                   // only disabled if IMGUI_USE_STB_SPRINTF is defined.

//---- Use stb_sprintf.h for a faster implementation of vsnprintf instead of the one from libc (unless IMGUI_DISABLE_DEFAULT_FORMAT_FUNCTIONS is defined)
// Compatibility checks of arguments and formats done by clang and GCC will be disabled in order to support the extra formats provided by stb_sprintf.h.
//#define IMGUI_USE_STB_SPRINTF

//---- Use FreeType to build and rasterize the font atlas (instead of stb_truetype which is embedded by default in Dear ImGui)
// Requires FreeType headers to be available in the include path. Requires program to be compiled with 'misc/freetype/imgui_freetype.cpp' (in this repository) + the FreeType library (not provided).
// On Windows you may use vcpkg with 'vcpkg install freetype --triplet=x64-windows' + 'vcpkg integrate install'.
//#define IMGUI_ENABLE_FREETYPE

//---- Use FreeType+lunasvg library to render OpenType SVG fonts (SVGinOT)
// Requires lunasvg headers to be available in the include path + program to be linked with the lunasvg library (not provided).
// Only works in combination with IMGUI_ENABLE_FREETYPE.
// (implementation is based on Freetype's rsvg-port.c which is licensed under CeCILL-C Free Software License Agreement)
//#define IMGUI_ENABLE_FREETYPE_LUNASVG

//---- Use stb_truetype to build and rasterize the font atlas (default)
// The only purpose of this define is if you want force compilation of the stb_truetype backend ALONG with the FreeType backend.
//#define IMGUI_ENABLE_STB_TRUETYPE

//---- Define constructor and implicit cast operators to convert back<>forth between your math types and ImVec2/ImVec4.
// This will be inlined as part of ImVec2 and ImVec4 class declarations.
#define IM_VEC2_CLASS_EXTRA \
    ImVec2 operator*(const float rhs)               { return ImVec2(x * rhs, y * rhs); } \
    ImVec2 operator/(const float rhs)               { return ImVec2(x / rhs, y / rhs); } \
    ImVec2 operator+(const ImVec2& rhs)             { return ImVec2(x + rhs.x, y + rhs.y); } \
    ImVec2 operator-(const ImVec2& rhs)             { return ImVec2(x - rhs.x, y - rhs.y); } \
    float area()                                    { return x * y; } \
    float length()                                  { return sqrt(x * x + y * y); } \
    float cross(const ImVec2& d)                    { return (x * d.y) - (y * d.x); } \
    float dot(const ImVec2& d)                      { return (x * d.x) + (y * d.y); } \
    float norm()                                    { return x * x + y * y; } \
    float distance(const ImVec2& d)                 { return sqrt((d.x - x) * (d.x - x) + (d.y - y) * (d.y - y)); } \
    ImVec2 project(ImVec2& a, ImVec2& b)            { ImVec2 base = b - a; float r = (*this - a).dot(base) / base.norm(); return a + base * r; } \

#define IM_VEC3_CLASS_EXTRA \
    ImVec3 operator+(const float rhs)               { return ImVec3(x + rhs, y + rhs, z + rhs); } \
    ImVec3 operator-(const float rhs)               { return ImVec3(x - rhs, y - rhs, z - rhs); } \
    ImVec3 operator*(const float rhs)               { return ImVec3(x * rhs, y * rhs, z * rhs); } \
    ImVec3 operator/(const float rhs)               { return ImVec3(x / rhs, y / rhs, z / rhs); } \
    ImVec3 operator+(ImVec3& rhs)                   { return ImVec3(x + rhs.x, y + rhs.y, z + rhs.z); } \
    ImVec3 operator-(ImVec3& rhs)                   { return ImVec3(x - rhs.x, y - rhs.y, z - rhs.z); } \
    ImVec3 operator*(ImVec3& rhs)                   { return ImVec3(x * rhs.x, y * rhs.y, z * rhs.z); } \
    ImVec3 operator/(ImVec3& rhs)                   { return ImVec3(x / rhs.x, y / rhs.y, z / rhs.z); } \
    ImVec3& operator*=(const float rhs)             { x *= rhs; y *= rhs; z *= rhs; return *this; } \
    ImVec3& operator/=(const float rhs)             { x /= rhs; y /= rhs; z /= rhs; return *this; } \
    ImVec3& operator+=(const float rhs)             { x += rhs; y += rhs; z += rhs; return *this; } \
    ImVec3& operator-=(const float rhs)             { x -= rhs; y -= rhs; z -= rhs; return *this; } \
    ImVec3& operator+=(const ImVec3& rhs)           { x += rhs.x; y += rhs.y; z += rhs.z; return *this; } \
    ImVec3& operator-=(const ImVec3& rhs)           { x -= rhs.x; y -= rhs.y; z -= rhs.z; return *this; } \
    ImVec3& operator*=(const ImVec3& rhs)           { x *= rhs.x; y *= rhs.y; z *= rhs.z; return *this; } \
    ImVec3& operator/=(const ImVec3& rhs)           { x /= rhs.x; y /= rhs.y; z /= rhs.z; return *this; } \
    bool operator==(const ImVec3& d) const          { return fabs(x - d.x) < 10e-8 && fabs(y - d.y) < 10e-8 && fabs(z - d.z) < 10e-8; } \
    bool operator==(const ImVec3& d)                { return fabs(x - d.x) < 10e-8 && fabs(y - d.y) < 10e-8 && fabs(z - d.z) < 10e-8; } \
    bool operator!=(const ImVec3& d) const          { return fabs(x - d.x) > 10e-8 || fabs(y - d.y) > 10e-8 || fabs(z - d.z) > 10e-8; } \
    bool operator!=(const ImVec3& d)                { return fabs(x - d.x) > 10e-8 || fabs(y - d.y) > 10e-8 || fabs(z - d.z) > 10e-8; } \
    ImVec3 RotY() const                             { return ImVec3(-z, y, x); } \
    ImVec3 RotZ() const                             { return ImVec3(-y, x, z); } \
    ImVec3 Cross(const ImVec3& b) const             { return ImVec3(y * b.z - z * b.y, z * b.x - x * b.z, x * b.y - y * b.x); } \
    float Dot(const ImVec3& b) const                { return x * b.x + y * b.y + z * b.z; } \
    ImVec3 Mult(float val) const                    { return ImVec3(x * val, y * val, z * val); } \
    ImVec3 Div(float val) const                     { return ImVec3(x / val, y / val, z / val); } \
    float Length() const                            { return (float)sqrt(x * x + y * y + z * z); } \
    ImVec3 Normalize()                              { (*this) *= (1.f / ( Length() > FLT_EPSILON ? Length() : FLT_EPSILON ) ); return (*this); } \
    ImVec2 Vec2()                                   { return ImVec2{x, y}; } \

#define IM_VEC4_CLASS_EXTRA \
    ImVec4 operator+(const float rhs)               { return ImVec4(x + rhs, y + rhs, z + rhs, w + rhs); } \
    ImVec4 operator-(const float rhs)               { return ImVec4(x - rhs, y - rhs, z - rhs, w - rhs); } \
    ImVec4 operator*(const float rhs)               { return ImVec4(x * rhs, y * rhs, z * rhs, w * rhs); } \
    ImVec4 operator/(const float rhs)               { return ImVec4(x / rhs, y / rhs, z / rhs, w / rhs); } \
    ImVec4 operator/(const ImVec4& rhs)             { return ImVec4(x / rhs.x, y / rhs.y, z / rhs.z, w / rhs.w); } \
    ImVec4& operator*=(const float rhs)             { x *= rhs; y *= rhs; z *= rhs; w *= rhs; return *this; } \
    ImVec4& operator/=(const float rhs)             { x /= rhs; y /= rhs; z /= rhs; w /= rhs; return *this; } \
    ImVec4& operator+=(const float rhs)             { x += rhs; y += rhs; z += rhs; w += rhs; return *this; } \
    ImVec4& operator-=(const float rhs)             { x -= rhs; y -= rhs; z -= rhs; w -= rhs; return *this; } \
    ImVec4& operator+=(const ImVec4& rhs)           { x += rhs.x; y += rhs.y; z += rhs.z; w += rhs.w; return *this; } \
    ImVec4& operator-=(const ImVec4& rhs)           { x -= rhs.x; y -= rhs.y; z -= rhs.z; w -= rhs.w; return *this; } \
    ImVec4& operator*=(const ImVec4& rhs)           { x *= rhs.x; y *= rhs.y; z *= rhs.z; w *= rhs.w; return *this; } \
    ImVec4& operator/=(const ImVec4& rhs)           { x /= rhs.x; y /= rhs.y; z /= rhs.z; w /= rhs.w; return *this; } \
    float& operator[](size_t index)                 { return ((float*)&x)[index]; } \
    const float& operator[](size_t index) const     { return ((float*)&x)[index]; } \
    ImVec3 rotate(const ImVec3& dir)                { \
        float ps = -x * dir.x - y * dir.y - z * dir.z; \
        float px = w * dir.x + y * dir.z - z * dir.y; \
        float py = w * dir.y + z * dir.x - x * dir.z; \
        float pz = w * dir.z + x * dir.y - y * dir.x; \
        return ImVec3(-ps * x + px * w - py * z + pz * y, -ps * y + py * w - pz * x + px * z, -ps * z + pz * w - px * y + py * x); } \
    ImVec4 mult(const ImVec4& d)                    { \
        ImVec4 out;                                        \
        out.x = w * d.x + x * d.w + y * d.z - z * d.y; \
        out.y = w * d.y + y * d.w + z * d.x - x * d.z; \
        out.z = w * d.z + z * d.w + x * d.y - y * d.x; \
        out.w = w * d.w - (x * d.x + y * d.y + z * d.z); \
        return out;} \
    void Cross(const ImVec4& v) \
    { \
        ImVec4 res; \
        res.x = y * v.z - z * v.y; \
        res.y = z * v.x - x * v.z; \
        res.z = x * v.y - y * v.x; \
        x = res.x; \
        y = res.y; \
        z = res.z; \
        w = 0.f; \
    } \
    void Cross(const ImVec4& v1, const ImVec4& v2) \
    { \
        x = v1.y * v2.z - v1.z * v2.y; \
        y = v1.z * v2.x - v1.x * v2.z; \
        z = v1.x * v2.y - v1.y * v2.x; \
        w = 0.f; \
    } \
    void Set(float v) { x = y = z = w = v; } \
    void Set(float _x, float _y, float _z = 0.f, float _w = 0.f) { x = _x; y = _y; z = _z; w = _w; } \
    void Lerp(const ImVec4& v, float t) { x += (v.x - x) * t; y += (v.y - y) * t; z += (v.z - z) * t; w += (v.w - w) * t; } \
    float Length() const { return sqrtf(x * x + y * y + z * z); }; \
    float LengthSq() const { return (x * x + y * y + z * z); }; \
    ImVec4 Normalize() { (*this) *= (1.f / ( Length() > FLT_EPSILON ? Length() : FLT_EPSILON ) ); return (*this); } \
    ImVec4 Normalize(const ImVec4& v) { x = v.x; y = v.y; z = v.z; w = v.w; this->Normalize(); return (*this); } \
    ImVec4 Abs() const { return ImVec4(fabsf(x), fabsf(y), fabsf(z)); } \
    float Dot(const ImVec4& v) const { return (x * v.x) + (y * v.y) + (z * v.z) + (w * v.w); } \
    float Dot3(const ImVec4& v) const { return (x * v.x) + (y * v.y) + (z * v.z); } \
    void Transform(const ImVec4& s, const ImMat4x4& matrix) { *this = s; Transform(matrix); } \
    void TransformVector(const ImVec4& v, const ImMat4x4& matrix) { (*this) = v; this->TransformVector(matrix); } \
    void TransformPoint(const ImVec4& v, const ImMat4x4& matrix) { (*this) = v; this->TransformPoint(matrix); } \
    void TransformVector(const ImMat4x4& matrix); \
    void TransformPoint(const ImMat4x4& matrix); \
    void Transform(const ImMat4x4& matrix); \

#define IMGUI_DEFINE_MATH_OPERATORS

#define IMGUI_DEFINE_MATH_EXTRA \
    static inline ImVec3 operator+(const ImVec3& lhs, const float rhs)      { return ImVec3(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs); } \
    static inline ImVec3 operator-(const ImVec3& lhs, const float rhs)      { return ImVec3(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs); } \
    static inline ImVec3 operator*(const ImVec3& lhs, const float rhs)      { return ImVec3(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs); } \
    static inline ImVec3 operator/(const ImVec3& lhs, const float rhs)      { return ImVec3(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs); } \
    static inline ImVec3 operator+(const ImVec3& lhs, const ImVec3& rhs)    { return ImVec3(lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z); } \
    static inline ImVec3 operator-(const ImVec3& lhs, const ImVec3& rhs)    { return ImVec3(lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z); } \
    static inline ImVec3 operator*(const ImVec3& lhs, const ImVec3& rhs)    { return ImVec3(lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z); } \
    static inline ImVec3 operator/(const ImVec3& lhs, const ImVec3& rhs)    { return ImVec3(lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z); } \
    static inline ImVec4 operator-(ImVec4 v)                                { return { -v.x, -v.y, -v.z, -v.w }; } \
    static inline ImVec4 operator+(const ImVec4& lhs, const float rhs)      { return ImVec4(lhs.x + rhs, lhs.y + rhs, lhs.z + rhs, lhs.w + rhs); } \
    static inline ImVec4 operator-(const ImVec4& lhs, const float rhs)      { return ImVec4(lhs.x - rhs, lhs.y - rhs, lhs.z - rhs, lhs.w - rhs); } \
    static inline ImVec4 operator*(const ImVec4& lhs, const float rhs)      { return ImVec4(lhs.x * rhs, lhs.y * rhs, lhs.z * rhs, lhs.w * rhs); } \
    static inline ImVec4 operator/(const ImVec4& lhs, const float rhs)      { return ImVec4(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs, lhs.w / rhs); } \

//---- Use 32-bit vertex indices (default is 16-bit) is one way to allow large meshes with more than 64K vertices.
// Your renderer backend will need to support it (most example renderer backends support both 16/32-bit indices).
// Another way to allow large meshes while keeping 16-bit indices is to handle ImDrawCmd::VtxOffset in your renderer.
// Read about ImGuiBackendFlags_RendererHasVtxOffset for details.
//#ifdef _WIN32
#if IMGUI_APPLICATION_RENDERING_GL3 || IMGUI_APPLICATION_RENDERING_GL2
//#define ImDrawIdx unsigned int
#endif
//#endif

//---- Override ImDrawCallback signature (will need to modify renderer backends accordingly)
//struct ImDrawList;
//struct ImDrawCmd;
//typedef void (*MyImDrawCallback)(const ImDrawList* draw_list, const ImDrawCmd* cmd, void* my_renderer_user_data);
//#define ImDrawCallback MyImDrawCallback

//---- Debug Tools: Macro to break in Debugger (we provide a default implementation of this in the codebase)
// (use 'Metrics->Tools->Item Picker' to pick widgets with the mouse and break into them for easy debugging.)
//#define IM_DEBUG_BREAK  IM_ASSERT(0)
//#define IM_DEBUG_BREAK  __debugbreak()

//---- Debug Tools: Enable slower asserts
//#define IMGUI_DEBUG_PARANOID

//---- Tip: You can add extra functions within the ImGui:: namespace from anywhere (e.g. your own sources/header files)
/*
namespace ImGui
{
    void MyFunction(const char* name, MyMatrix44* mtx);
}
*/
